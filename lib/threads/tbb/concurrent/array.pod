
package 

=head1 NAME

threads::tbb::concurrent::array - shared array variable via tbb::concurrent_vector

=head1 SYNOPSIS

  use threads::tbb;

  #my @array :concurrent;  # TODO
  tie my @array, "threads::tbb::concurrent::array";

=head1 DESCRIPTION

The concurrent vector is an array that multiple threads can read to
and write from.  It also provides the advantage of using cache-aligned
array slots, so threads don't conflict on nearby access with each
other.

The thread-safe operations on this type are:

These are:

=item FETCH & STORE

Tied access to the array contents.  If you are using index ranges from
a L<threads::tbb::blocked_int>, this is safe.

=item PUSH

Tied access to pushing to the end of the array.  Adding an item or
list of items to the end of the list.  There is no concurrent POP or
SHIFT; see L<threads::tbb::concurrent::fifo> for that.

=item 

=back



=head2 THREAD UNSAFE OPERATIONS

These functions return information which can get out of date.  None of
them are safe, because you'd need to hold an exclusive lock on the
array to safely use them.

=over

=item FETCHSIZE

Get the length of the array.

=item STORESIZE

Supported, calls grow_to_at_least and the grow_by.

=item EXTEND

(TODO) could be implemented using grow_by and then calls to PUSH use
the grow_by.

=back

=head2 UNSUPPORTED OPERATIONS

=over



=back

=cut

